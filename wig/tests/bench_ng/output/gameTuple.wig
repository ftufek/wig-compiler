service {
          ------||| Symbol table: 
          ------||| Again	|sym_type: variable	|type: html
          ------||| Done	|sym_type: variable	|type: html
          ------||| Finish	|sym_type: variable	|type: html
          ------||| GameSeeded	|sym_type: variable	|type: html
          ------||| GetSeed	|sym_type: variable	|type: html
          ------||| HiScore	|sym_type: session	|type: void
          ------||| Info	|sym_type: variable	|type: tuple
          ------||| Init	|sym_type: variable	|type: html
          ------||| List	|sym_type: variable	|type: html
          ------||| Play	|sym_type: session	|type: void
          ------||| Record	|sym_type: variable	|type: html
          ------||| Retry	|sym_type: variable	|type: html
          ------||| Seed	|sym_type: session	|type: void
          ------||| infoS	|sym_type: schema	|type: schema
          ------||| nextRandom	|sym_type: function	|type: int
          ------||| seed	|sym_type: variable	|type: int
          ------||| --------------
  const html GetSeed = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| "seed"	|sym_type: input_tag	|type: html
          ------||| --------------
<html> <body>
    Please enter an integer seed for the random number generator:
        <input name="seed" size=5 type="text">
	  </body> </html>;
  const html GameSeeded = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| --------------
<html> <body>
     Ok, now the game can proceed, the generator is seeded.
       </body> </html>;
  const html Init = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| "guess"	|sym_type: input_tag	|type: html
          ------||| --------------
<html> <body>
    Please guess a number between 0 and 99:
    <input name="guess" size=2 type="text">
  </body> </html>;
  const html Retry = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| "guess"	|sym_type: input_tag	|type: html
          ------||| --------------
<html> <body>
    That number is too large!
    <p>
    Please keep your guess between 0 and 99:
    <input name="guess" size=2 type="text">
  </body> </html>;
  const html Again = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| "guess"	|sym_type: input_tag	|type: html
          ------||| correction	|sym_type: hole_tag	|type: html
          ------||| --------------
<html> <body>
    That is not correct. Try a <[correction]> number:
    <input name="guess" size=2 type="text">
  </body> </html>;
  const html Done = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| trys	|sym_type: hole_tag	|type: html
          ------||| --------------
<html> <body>
    You got it, using <[trys]> guesses.
  </body> </html>;
  const html Record = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| "name"	|sym_type: input_tag	|type: html
          ------||| old	|sym_type: hole_tag	|type: html
          ------||| --------------
<html> <body>
    That makes you the new record holder,
    beating the old record of <[old]> guesses.
    <p>
    Please enter your name for the hi-score list
    <input name="name" size=20 type="text">
  </body> </html>;
  const html Finish = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| --------------
<html> <body>
    Thanks for playing this exciting game.
  </body> </html>;
  const html List = 
 ---- Symbols inside the HTML
          ------||| Symbol table: 
          ------||| holder	|sym_type: hole_tag	|type: html
          ------||| plays	|sym_type: hole_tag	|type: html
          ------||| record	|sym_type: hole_tag	|type: html
          ------||| --------------
<html> <body>
    In <[plays]> plays of this game, the record
    holder is <[holder]> with <[record]> guesses.
  </body> </html>;
  schema infoS {
------- Symbols inside the schema: 
          ------||| Symbol table: 
          ------||| holder	|sym_type: field	|type: string
          ------||| plays	|sym_type: field	|type: int
          ------||| record	|sym_type: field	|type: int
          ------||| --------------
    int plays;
    int record;
    string holder;
  }
  int seed;
  tuple infoS Info;
  int nextRandom() { 
          ------||| Symbol table: 
          ------||| current	|sym_type: variable	|type: int
          ------||| --------------
          ------||| Again	|sym_type: variable	|type: html
          ------||| Done	|sym_type: variable	|type: html
          ------||| Finish	|sym_type: variable	|type: html
          ------||| GameSeeded	|sym_type: variable	|type: html
          ------||| GetSeed	|sym_type: variable	|type: html
          ------||| Init	|sym_type: variable	|type: html
          ------||| List	|sym_type: variable	|type: html
          ------||| Record	|sym_type: variable	|type: html
          ------||| Retry	|sym_type: variable	|type: html
          ------||| infoS	|sym_type: schema	|type: schema
          ------||| nextRandom	|sym_type: function	|type: int
          ------||| --------------
    int current;
    seed = 25173 * seed + 13849 % 65536;
    return seed;
  }

  session Seed () { 
          ------||| Symbol table: 
          ------||| --------------
          ------||| Again	|sym_type: variable	|type: html
          ------||| Done	|sym_type: variable	|type: html
          ------||| Finish	|sym_type: variable	|type: html
          ------||| GameSeeded	|sym_type: variable	|type: html
          ------||| GetSeed	|sym_type: variable	|type: html
          ------||| Info	|sym_type: variable	|type: tuple
          ------||| Init	|sym_type: variable	|type: html
          ------||| List	|sym_type: variable	|type: html
          ------||| Record	|sym_type: variable	|type: html
          ------||| Retry	|sym_type: variable	|type: html
          ------||| Seed	|sym_type: session	|type: void
          ------||| infoS	|sym_type: schema	|type: schema
          ------||| nextRandom	|sym_type: function	|type: int
          ------||| seed	|sym_type: variable	|type: int
          ------||| --------------
    show GetSeed receive [seed = seed];
    exit GameSeeded;
  }
  session Play () { 
          ------||| Symbol table: 
          ------||| guess	|sym_type: variable	|type: int
          ------||| guesses	|sym_type: variable	|type: int
          ------||| localholder	|sym_type: variable	|type: string
          ------||| number	|sym_type: variable	|type: int
          ------||| --------------
          ------||| Again	|sym_type: variable	|type: html
          ------||| Done	|sym_type: variable	|type: html
          ------||| Finish	|sym_type: variable	|type: html
          ------||| GameSeeded	|sym_type: variable	|type: html
          ------||| GetSeed	|sym_type: variable	|type: html
          ------||| Info	|sym_type: variable	|type: tuple
          ------||| Init	|sym_type: variable	|type: html
          ------||| List	|sym_type: variable	|type: html
          ------||| Play	|sym_type: session	|type: void
          ------||| Record	|sym_type: variable	|type: html
          ------||| Retry	|sym_type: variable	|type: html
          ------||| Seed	|sym_type: session	|type: void
          ------||| infoS	|sym_type: schema	|type: schema
          ------||| nextRandom	|sym_type: function	|type: int
          ------||| seed	|sym_type: variable	|type: int
          ------||| --------------
    int number;
    int guesses;
    int guess;
    string localholder;
    number = nextRandom() % 100;
    Info.plays = Info.plays + 1;
    guesses = 1;
    show Init receive [guess = guess];
    while (guess > 99)      show Retry receive [guess = guess];

    while (guess != number) { 
        guesses = guesses + 1;
        if (guess > number)        show plug Again[correction = "lower"] receive [guess = guess];
        else        show plug Again[correction = "higher"] receive [guess = guess];
        while (guess > 99)          show Retry receive [guess = guess];

      }

    show plug Done[trys = guesses]    
;
    if (Info.record == 0 || Info.record > guesses) { 
      show plug Record[old = Info.record] receive [localholder = name];
      Info.holder = localholder;
      Info.record = guesses;
    }
    exit Finish;
  }
  session HiScore () { 
          ------||| Symbol table: 
          ------||| --------------
          ------||| Again	|sym_type: variable	|type: html
          ------||| Done	|sym_type: variable	|type: html
          ------||| Finish	|sym_type: variable	|type: html
          ------||| GameSeeded	|sym_type: variable	|type: html
          ------||| GetSeed	|sym_type: variable	|type: html
          ------||| HiScore	|sym_type: session	|type: void
          ------||| Info	|sym_type: variable	|type: tuple
          ------||| Init	|sym_type: variable	|type: html
          ------||| List	|sym_type: variable	|type: html
          ------||| Play	|sym_type: session	|type: void
          ------||| Record	|sym_type: variable	|type: html
          ------||| Retry	|sym_type: variable	|type: html
          ------||| Seed	|sym_type: session	|type: void
          ------||| infoS	|sym_type: schema	|type: schema
          ------||| nextRandom	|sym_type: function	|type: int
          ------||| seed	|sym_type: variable	|type: int
          ------||| --------------
    exit plug List[plays = Info.plays, holder = Info.holder, record = Info.record];
  }
}
